generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Users {
    id        String   @id
    email     String   @unique
    username  String?  @unique
    fullname  String?
    image     String?
    role      String?
    createdAt DateTime @default(now())
    isOnline  Boolean? @default(false)

    accounts        Accounts?
    threadBookmarks BookMarks[]
    botNotifier     BotNotifier[]
    sites           Site[]

    @@unique([id])
}

model Accounts {
    id            String  @id
    userId        String  @unique
    hash          String?
    refresh_token String? @default("") @db.Text
    type          String? @default("")
    users         Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([id])
    @@index([userId])
}

model BookMarks {
    id              String  @id
    userId          String
    threadId        String?
    showId          String?
    type            String?
    category        String?
    coverImage      String?
    readingStats    String?
    userImage       String  @db.Text
    title           String  @db.Text
    displayName     String
    emoji           String
    headline        String  @db.Text
    content         String  @db.LongText
    link            String  @db.Text
    username        String  @db.Text
    images          Json
    code            String  @db.LongText
    linkPreviewMeta Json?
    user            Users   @relation(fields: [userId], references: [id])

    @@index([userId])
}

model BotNotifier {
    id          String  @id
    userId      String
    name        String
    type        String // thread, shows, jobs
    tags        String
    communities String
    token       String? @db.Text

    disabled Boolean? @default(false)

    icon String

    isAuthenticated Boolean @default(false)

    notifAuthChannels Json? @default("[]")

    createdAt DateTime @default(now())

    user Users @relation(fields: [userId], references: [id])
    // prevPosts BotPrevPosts[]

    @@index([userId])
}

model BotPrevPosts {
    id     String @unique
    type   String
    postId String

    createdAt DateTime @default(now())

    @@index([id])
}

model Site {
    id               String         @id
    userId           String
    name             String
    slug             String         @unique
    pageType         String
    themeName        String
    notionDatabaseId String?
    portfolioData    PortfolioData?

    createdAt DateTime @default(now())

    user Users @relation(fields: [userId], references: [id])

    @@index([userId])
}

model PortfolioData {
    id          String  @id
    siteId      String  @unique
    socialLinks Json?
    experiences Json?
    tagline     String?
    headline    String?
    email       String?
    about       String? @db.LongText
    stacks      Json?
    resumeUrl   String?
    ghRepo      Json?

    site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Settings {
    id                     String @id
    userId                 String
    notionIntegrationToken String @db.Text
    showwcaseToken         String @db.Text

    createdAt DateTime @default(now())
}

model PageTracker {
    id        String @id
    slug      String
    ipAddress String
    views     Int
    userId    String

    createdAt DateTime @default(now())
}

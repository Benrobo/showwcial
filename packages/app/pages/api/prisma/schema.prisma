generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Users {
    id        String   @id
    email     String   @unique
    username  String?  @unique
    fullname  String?
    image     String?
    role      String?
    createdAt DateTime @default(now())
    isOnline  Boolean? @default(false)

    accounts         Accounts?
    threadBookmarks  BookMarks[]
    botNotifier      BotNotifier[]
    sites            Site[]
    messagesSent     Message[]     @relation("sentMessages")
    messagesReceived Message[]     @relation("receivedMessages")

    @@unique([id])
}

model Accounts {
    id            String  @id
    userId        String  @unique
    hash          String?
    refresh_token String? @default("") @db.Text
    type          String? @default("")
    users         Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([id])
    @@index([userId])
}

model Verification {
    id         String   @unique @default(cuid())
    identifier String
    token      String
    expiry     DateTime
}

model Message {
    id         String   @id
    content    String
    senderId   String
    receiverId String
    createdAt  DateTime @default(now())

    sender   Users @relation("sentMessages", fields: [senderId], references: [id])
    receiver Users @relation("receivedMessages", fields: [receiverId], references: [id])

    @@index([id])
    @@index([senderId])
    @@index([receiverId])
}

model BookMarks {
    id              String @id
    userId          String
    threadId        String @unique
    userImage       String @db.Text
    title           String @db.Text
    displayName     String
    emoji           String
    headline        String @db.Text
    content         String @db.LongText
    link            String @db.Text
    username        String @db.Text
    images          Json
    code            String @db.LongText
    linkPreviewMeta Json?
    user            Users  @relation(fields: [userId], references: [id])

    @@index([userId])
}

model BotNotifier {
    id          String  @id
    userId      String
    name        String
    type        String // thread, shows, jobs
    tags        String
    communities String
    token       String? @db.Text

    disabled Boolean? @default(false)

    icon String

    isAuthenticated Boolean @default(false)

    notifAuthChannels Json? @default("[]")

    createdAt DateTime @default(now())

    user Users @relation(fields: [userId], references: [id])
    // prevPosts BotPrevPosts[]

    @@index([userId])
}

model BotPrevPosts {
    id     String @unique
    type   String // thread, shows, jobs
    postId String

    // action String
    createdAt DateTime @default(now())

    // notifier BotNotifier @relation(fields: [id], references: [id])

    // @@index([id])
}

model Site {
    id         String   @id
    userId     String
    name       String
    slug       String   @unique
    pageType   String
    themeName  String
    notionPage String?
    createdAt  DateTime @default(now())

    user Users @relation(fields: [userId], references: [id])

    @@index([userId])
}
